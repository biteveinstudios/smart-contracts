// SPDX-License-Identifier: GPL-2.0-or-later
pragma solidity 0.8.7;

import "@openzeppelin/contracts/access/AccessControl.sol";

import "../common/FundsManagementAccessControl.sol";

import "../interfaces/IBallGachaponOracleCaller.sol";
import "../interfaces/IZomonStruct.sol";
import "../interfaces/IRuneStruct.sol";

contract BallGachaponOracle is AccessControl, FundsManagementAccessControl {
    bool public constant IS_BALL_GACHAPON_ORACLE = true;

    bytes32 public constant REQUESTER_ROLE = keccak256("REQUESTER_ROLE");
    bytes32 public constant REPORTER_ROLE = keccak256("REPORTER_ROLE");

    mapping(address => uint256) private _requestIdNonceByAccount;

    mapping(uint256 => bool) private _pendingRequests;

    event RequestedBallGachapon(
        uint256 indexed requestId,
        address indexed callerAddress,
        uint256 indexed tokenId,
        address to
    );
    event ReportedBallGachapon(
        uint256 indexed requestId,
        address indexed callerAddress,
        uint256 indexed tokenId,
        address to,
        Zomon zomonData,
        RunesMint runesData
    );

    constructor() {
        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());
    }

    // Emits the event to trigger the oracle
    function requestBallGachapon(uint256 _tokenId, address _to)
        external
        onlyRole(REQUESTER_ROLE)
        returns (uint256)
    {
        _requestIdNonceByAccount[_msgSender()]++;

        uint256 requestId = _getRequestId(_msgSender());

        _pendingRequests[requestId] = true;

        emit RequestedBallGachapon(requestId, _msgSender(), _tokenId, _to);

        return requestId;
    }

    // Calls the oracle caller back with the random zomon generated by the oracle
    function reportBallGachapon(
        uint256 _requestId,
        address _callerAddress,
        uint256 _tokenId,
        address _to,
        string calldata _zomonTokenURI,
        Zomon calldata _zomonData,
        RunesMint calldata _runesData
    ) external onlyRole(REPORTER_ROLE) {
        require(_pendingRequests[_requestId], "REQUEST_ID_IS_NOT_PENDING");

        delete _pendingRequests[_requestId];

        IBallGachaponOracleCaller callerContractInstance = IBallGachaponOracleCaller(
                _callerAddress
            );

        require(
            callerContractInstance.IS_BALL_GACHAPON_ORACLE_CALLER(),
            "CALLER_ADDRESS_IS_NOT_A_BALL_GACHAPON_ORACLE_CALLER_CONTRACT_INSTANCE"
        );

        emit ReportedBallGachapon(
            _requestId,
            _callerAddress,
            _tokenId,
            _to,
            _zomonData,
            _runesData
        );

        callerContractInstance.callback(
            _requestId,
            _tokenId,
            _to,
            _zomonTokenURI,
            _zomonData,
            _runesData
        );
    }

    function _getRequestId(address _sender) private view returns (uint256) {
        return
            uint256(
                keccak256(
                    abi.encodePacked(_sender, _requestIdNonceByAccount[_sender])
                )
            );
    }
}
